name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set Up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: yarn

      - name: Build project
        run: yarn build

      - name: Set up SSH
        run: |
          mkdir -p $HOME/.ssh
          echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/id_rsa.pem
          chmod 600 ~/.ssh/id_rsa.pem
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        env:
          HOST: ${{ secrets.SERVER_HOST }}
          USERNAME: ${{ secrets.SERVER_USERNAME }}
          SSH_KEY: ${{ secrets.SERVER_SSH_KEY }}
          DB_HOST: ${{secrets.DB_HOST}}
          DB_USER: ${{secrets.DB_USER}}
          DB_PASSWORD: ${{secrets.DB_PASSWORD}}
          DB_DATABASE: ${{secrets.DB_DATABASE}}
        run: |

          pwd

          ls -al

          #파일 업로드
          rsync -avz --delete --exclude=node_modules --exclude=.git -e "ssh -i ~/.ssh/id_rsa.pem" ./ ${{ env.USERNAME }}@${{ env.HOST }}:/home/${{ env.USERNAME }}/app

          #cloud서버 접근후 명령어 실행
          ssh -t -i "~/.ssh/id_rsa.pem" ${{ env.USERNAME }}@${{ env.HOST }} << 'EOF'


          #생성된 디렉토리 이동
          cd /home/${{env.USERNAME}}/app

          # pwd
          # .env 파일 생성
          echo "dbHost=localhost > .env
          echo "dbUser=${DB_USER}" >> .env
          echo "dbPassword=${DB_PASSWORD}" >> .env
          echo "database=${DB_DATABASE}" >> .env

          echo "${USERNAME}"
          echo "/home/${{ env.USERNAME }}/app"

          pwd
          #파일 업로드
          npm i

          #데이터 베이스 마이그레이션
          # yarn db:generate
          # yarn db:run

          #빌드 파일배포
          npm run build

          # #PM2 무중단 배포
          # pm2 reload ecosystem.config.js --update-env

          EOF
